#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞
"""

import asyncio
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()


async def test_database_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        from database.base import async_engine, Base
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        async with async_engine.begin() as conn:
            await conn.run_sync(Base.metadata.create_all)
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False
    
    return True

async def test_models():
    """–¢–µ—Å—Ç –º–æ–¥–µ–ª–µ–π"""
    try:
        from database.models import User, Cookie
        from database.base import Base
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–µ–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
        assert User.__tablename__ == "users"
        assert Cookie.__tablename__ == "cookies"
        print("‚úÖ –ú–æ–¥–µ–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–¥–µ–ª—è—Ö: {e}")
        return False
    
    return True

async def test_repositories():
    """–¢–µ—Å—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤"""
    try:
        from database.repositories import UserRepository, CookieRepository, DatabaseManager
        from database.base import async_session_maker
        
        async with async_session_maker() as session:
            db_manager = DatabaseManager(session)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await db_manager.users.create_user("test_user_123")
            assert user.user_id == "test_user_123"
            print("‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await db_manager.users.delete_user("test_user_123")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è—Ö: {e}")
        return False
    
    return True

async def test_auth_service():
    """–¢–µ—Å—Ç —Å–µ—Ä–≤–∏—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    try:
        from domain.auth.auth_service import WildberriesAuthService
        from database.base import async_session_maker
        
        async with async_session_maker() as session:
            auth_service = WildberriesAuthService(session)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await auth_service.create_user("test_auth_user")
            assert user.user_id == "test_auth_user"
            print("‚úÖ –°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await auth_service.delete_user("test_auth_user")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å–µ—Ä–≤–∏—Å–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return False
    
    return True

async def test_schemas():
    """–¢–µ—Å—Ç —Å—Ö–µ–º"""
    try:
        from domain.auth.schemas import UserCreate, AuthRequest, AuthResponse
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º
        user_create = UserCreate(user_id="test_schema_user")
        assert user_create.user_id == "test_schema_user"
        
        auth_request = AuthRequest(
            user_id="test_user",
            phone="9991231212",
            verification_code="123456"
        )
        assert auth_request.user_id == "test_user"
        
        auth_response = AuthResponse(
            success=True,
            message="Test message",
            user_id="test_user"
        )
        assert auth_response.success is True
        
        print("‚úÖ –°—Ö–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ö–µ–º–∞—Ö: {e}")
        return False
    
    return True

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞...")
    print("=" * 50)
    
    tests = [
        ("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î", test_database_connection),
        ("–ú–æ–¥–µ–ª–∏", test_models),
        ("–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏", test_repositories),
        ("–°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", test_auth_service),
        ("–°—Ö–µ–º—ã", test_schemas),
    ]
    
    results = []
    for test_name, test_func in tests:
        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {test_name}")
        try:
            result = await test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            results.append((test_name, False))
    
    print("\n" + "=" * 50)
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    
    passed = 0
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\nüéØ –ò—Ç–æ–≥–æ: {passed}/{len(results)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == len(results):
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
        print("\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å: python main.py")
        print("3. –û—Ç–∫—Ä–æ–π—Ç–µ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é: http://localhost:8000/docs")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")

if __name__ == "__main__":
    asyncio.run(main()) 
